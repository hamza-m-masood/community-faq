# -*- mode: ruby -*-
# vi: set ft=ruby :

require_relative "./abstraction"

# Define network that the virtual machines will join.
NETWORK_SETTINGS = {
  network_type: "NAT",              # NAT = use a private network; BRIDGE = use addresses from your broadband router's network.
  private_network: "192.168.56.",   # Network prefix for VM network if using NAT mode. Ignored for BRIDGE.
  ip_start: 11,                     # First IP to use for VMs on private network if using NAT mode. Ignored for BRIDGE.
}

# Define list of virtual machines to be created here.
VIRTUAL_MACHINES = [
  {
    name: "controller",           # Name (and hostname) for the VM
    cpu: 4,                       # Number of vCPUs to assign it
    memory: 2048,                 # RAM in MB to assign it
    box: Hypervisor.centos,       # Operating system to run (centos or ubuntu). Note on Apple Silicon "centos" installs Rocky Linux. They are 100% compatible
  #packages: ["jq"],              # Packages to be installed by OS's package manager
  },
  {
    name: "target1",
    cpu: 2,
    memory: 2048,
    box: Hypervisor.ubuntu,
  #packages: ["jq"],
  },
]

# Deploy the VMs
Vagrant.configure("2") do |config|
  config.vm.box_check_update = false

  # For each machine defined in VIRTUAL_MACHINES above
  VIRTUAL_MACHINES.each_with_index do |vm, index|
    config.vm.define vm[:name] do |node|
      # Set the "box", i.e. operating system for guest
      node.vm.box = vm[:box]
      # Get hypervisor support for the host OS
      Hypervisor.get node: node do |hv|
        # Deploy the VM
        hv.deploy vm: vm, network: NETWORK_SETTINGS, index: index
      end
    end
  end

  # Tasks to perform before any VMs are created
  config_shown = false
  config.trigger.before :up do |trigger|
    trigger.info = "Pre-start trigger"
    trigger.ruby do |env, machine|
      if !config_shown
        show_system_info(trigger)
        config_shown = true
      end
    end
  end

  # Tasks to perform after all VMs are created
  vm_count = 0
  config.trigger.after :up do |trigger|
    trigger.info = "Post-provision"
    trigger.ruby do |env, machine|
      vm_count += 1
      if vm_count == env.machine_names.length()
        post_provision(env)
      end
    end
  end
end

def b_puts(str, width = 71)
  padding = width - 4 - str.length
  if padding < 1
    padding = 1
  end
  pad = " " * padding
  puts "# #{str}#{pad} #"
end

def show_system_info(trigger)
  begin
    puts "#######################################################################"
    b_puts("")
    b_puts("If raising a question on our forums, please PASTE (not screenshot)")
    b_puts("the content of this box with your question")
    b_puts("")
    b_puts("Detecting your hardware...")
    host = Host.get()
    b_puts "- System: #{host.os_name()}"
    b_puts("- CPU:    #{host.cpu_name()} (#{host.cpu_count()} cores)")
    b_puts("- RAM:    #{host.physical_ram_gb()} GB")
    if !host.hypervisor_exists?
      raise DetectionError.new "FATAL - Missing #{host.hypervisor_name()}. Please install it first."
    end
  rescue DetectionError => e
    b_puts("#{e}")
    trigger.abort = true
    raise
  ensure
    b_puts("")
    puts "#######################################################################\n\n"
  end
end

def post_provision(env)
  # Build hosts file fragment
  puts "--> Harvesting machine IPs"
  hosts = ""
  env.active_machines.each do |active_machine|
    vm_name = active_machine[0].to_s
    ip = %x{ vagrant ssh -c primary-ip #{vm_name} }
    hosts << ip << " " << vm_name << "\n"
  end
  # Adjust hosts file
  File.open("hosts.tmp", "w") { |file| file.write(hosts) }
  env.active_machines.each do |active_machine|
    vm_name = active_machine[0].to_s
    puts "--> Setting hosts file: #{vm_name}"
    %x{ vagrant upload hosts.tmp /tmp/hosts.tmp #{vm_name}}
    %x{ vagrant ssh -c 'sudo sed -i "/#{vm_name}/d" /etc/hosts ; cat /tmp/hosts.tmp | sudo tee -a /etc/hosts' #{vm_name}}
  end
  puts ""
  puts hosts
  File.delete("hosts.tmp")
end
